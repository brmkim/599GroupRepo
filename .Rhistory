x <- read.table("https://github.com/brmkim/599GroupRepo/blob/master/tariff_import.csv", fill = TRUE)
library(RCurl)
#x <- getURL("https://github.com/brmkim/599GroupRepo/blob/master/tariff_import.csv")
#y <- read.csv(text = x)
x <- read.table("https://github.com/brmkim/599GroupRepo/blob/master/tariff_import.csv")
library(RCurl)
#x <- getURL("https://github.com/brmkim/599GroupRepo/blob/master/tariff_import.csv")
#y <- read.csv(text = x)
download.file("https://raw.githubusercontent.com/brmkim/599GroupRepo/master/tariff_import.csv", destfile = "/tmp/test.csv", method = "curl")
x <- read.csv("/tmp/test.csv")
str(x)
View(x)
download.file("https://raw.githubusercontent.com/brmkim/599GroupRepo/master/tariff_import.csv", destfile = "/tmp/test.csv", method = "curl")
x <- read.csv("/tmp/test.csv")
# Download the file from the RAW github file
download.file("https://raw.githubusercontent.com/brmkim/599GroupRepo/master/tariff_import.csv", destfile = "/tmp/test.csv", method = "curl")
df <- read.csv("/tmp/test.csv")
str(df)
View(df)
summary(df$totalImportInUSD)
history(df$totalImportInUSD)
hist(df$totalImportInUSD)
hist(df$tariffPecentage)
summary(df$totalImportInUSD)
hist(df$totalImportInUSD)
boxplot(df$totalImportInUSD, horizontal = TRUE)
boxplot(df$tariffPecentage, horizontal = TRUE)
boxplot(df$totalImportInUSD ~ df$reversedTariff, horizontal = FALSE, las = 2)
boxplot(df$totalImportInUSD ~ df$tariffPecentage, horizontal = FALSE, las = 2)
# non parametric
kruskal.text(totalImportInUSE~factor(tariffPercentage), data=df)
# non parametric
kruskal.test(totalImportInUSE~factor(tariffPercentage), data=df)
# non parametric
kruskal.test(totalImportInUSD~factor(tariffPercentage), data=df)
# non parametric
kruskal.test(totalImportInUSD~factor(tariffPecentage), data=df)
# Download the file from the RAW github file
download.file("https://raw.githubusercontent.com/brmkim/599GroupRepo/master/tariff_import.csv", destfile = "/tmp/test.csv", method = "curl")
df <- read.csv("/tmp/test.csv")
# non parametric
kruskal.test(totalImportInUSD~factor(tariffPercentage), data=df)
# 	Kruskal-Wallis rank sum test
#
#data:  totalImportInUSD by factor(tariffPecentage)
#Kruskal-Wallis chi-squared = 21.902, df = 21, p-value = 0.4052
# See how the other proposed predictors relates to the dependent variable
plot(df$totalImportInUSD, df$populationUS)
plot(df$totalImportInUSD, df$medianIncomeCurrentDollar)
test=lm(as.numeric(totalImportInUSD)~populations+medianIncomeCurrentDollar,
data=df)
test=lm(as.numeric(totalImportInUSD)~populationUS+medianIncomeCurrentDollar,
data=df)
test=lm(as.numeric(totalImportInUSD)~populationUS+medianIncomeCurrentDollar,
data=df)
summary(test)
test=lm(as.numeric(totalImportInUSD)~populationUS+medianIncomeCurrentDollar,
data=df)
summary(test)
test=lm(as.numeric(totalImportInUSD) ~ tariffPercentage + populationUS + medianIncomeCurrentDollar,
data=df)
summary(test)
# Making plots to visualize the affect of the proposed predictors on the
# dependent variable
library(dotwhisker)
install.packages("dotwhisker")
# Making plots to visualize the affect of the proposed predictors on the
# dependent variable
library(dotwhisker)
library(broom)
library(dplyr)
# Making plots to visualize the affect of the proposed predictors on the
# dependent variable
library(dotwhisker)
library(broom)
library(dplyr)
model1_t = tidy(test) %>%
mutate(model = "Model 1")
dwplot(model1_t) +
geom_vline(xintercept = 0,
colour = "grey60",
linetype = 2) +
scale_colour_grey(start = .1, end = .7) +theme_bw()
library(cluster)
set.seed(123)
# computing clusters
result <- kmeans(df[,c(3:5)],
centers = 5)
df$cluster=as.factor(result$cluster)
install.packages("cluster")
library(cluster)
set.seed(123)
# computing clusters
result <- kmeans(df[,c(3:5)],
centers = 5)
df$cluster=as.factor(result$cluster)
library(cluster)
set.seed(123)
# computing clusters
result <- kmeans(df[,c(3:5)],
centers = 5)
df$cluster=as.factor(result$cluster)
boxplot(df$corruption~df$cluster,horizontal = FALSE,las=2)
library(cluster)
set.seed(123)
# computing clusters
result <- kmeans(df[,c(3:5)],
centers = 5)
df$cluster=as.factor(result$cluster)
boxplot(df$totalImportInUSD~df$cluster,horizontal = FALSE,las=2)
knitr::opts_chunk$set(echo = TRUE)
dataLink="https://github.com/EvansDataScience/basicFinal_VISUAL/raw/master/dataProject.csv"
df=read.csv(dataLink,stringsAsFactors = FALSE)
# Download the file from the RAW github file
download.file("https://raw.githubusercontent.com/brmkim/599GroupRepo/master/tariff_import.csv", destfile = "/tmp/test.csv", method = "curl")
df <- read.csv("/tmp/test.csv")
dataLink="https://github.com/EvansDataScience/basicFinal_VISUAL/raw/master/dataProject.csv"
mdf=read.csv(dataLink,stringsAsFactors = FALSE)
str(mdf)
str(df)
# Download the file from the RAW github file
download.file("https://raw.githubusercontent.com/brmkim/599GroupRepo/master/tariff_import.csv", destfile = "/tmp/test.csv", method = "curl")
df <- read.csv("/tmp/test.csv", stringsAsFactors = FALSE)
str(df)
View(df)
summary(df$corruption)
summary(mdf$corruption)
hist(mdf$corruption)
boxplot(mdf$corruption,horizontal = TRUE)
boxplot(mdf$corruption~df$Continent,horizontal = FALSE,las=2)
boxplot(mdf$corruption~mdf$Continent,horizontal = FALSE,las=2)
# non parametric
kruskal.test(corruption~factor(Continent), data = df)
# non parametric
kruskal.test(corruption~factor(Continent), data = mdf)
plot(mdf$corruption,mdf$press)
plot(mdf$corruption,mdf$economy)
test=lm(as.numeric(corruption)~press+economy,data=mdf)
test=lm(as.numeric(corruption)~press+economy,data=mdf)
mtest=lm(as.numeric(corruption)~press+economy,data=mdf)
summary(mtest)
model1_t = tidy(mtest) %>%
mutate(model = "Model 1")
test=lm(as.numeric(totalImportInUSD) ~ tariffPercentage + populationUS + medianIncomeCurrentDollar,
data=df)
summary(test)
model1_t = tidy(test) %>%
mutate(model = "Model 1")
library(dotwhisker)
library(broom)
library(dplyr)
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
model1_t = tidy(test) %>%
mutate(model = "Model 1")
model1_t = tidy(test)
install.packages("ggplot2")
library(dotwhisker)
library(broom)
library(dplyr)
install.packages("dplyr")
library(dotwhisker)
library(broom)
library(dplyr)
library(ggplot2)
library(dotwhisker)
library(broom)
library(dplyr)
model1_t = tidy(test) %>%
mutate(model = "Model 1")
dwplot(model1_t) +
geom_vline(xintercept = 0,
colour = "grey60",
linetype = 2) +
scale_colour_grey(start = .1, end = .7) +theme_bw()
# Not sure about the result
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dotwhisker)
library(broom)
library(dplyr)
mmodel1_t = tidy(mtest) %>%
mutate(model = "Model 1")
dwplot(model1_t) +
geom_vline(xintercept = 0,
colour = "grey60",
linetype = 2) +
scale_colour_grey(start = .1, end = .7) +theme_bw()
mmodel1_t = tidy(mtest) %>%
mutate(model = "Model 1")
dwplot(mmodel1_t) +
geom_vline(xintercept = 0,
colour = "grey60",
linetype = 2) +
scale_colour_grey(start = .1, end = .7) +theme_bw()
library(cluster)
set.seed(123)
# computing clusters
result <- kmeans(mdf[,c(3:5)],
centers = 5)
mdf$cluster=as.factor(result$cluster)
updateR()
install.packages("installr"); require(installr)
# and linear models
library(MARSS) # Multivariate time-series analasys
df <- read.csv("/tmp/test.csv", stringsAsFactors = FALSE)
str(df)
hist(df$totalImportInUSD) # Most equal to $100 billion or less, next most frequent amount between 400 and 500 billion
# Boxplot graphs
boxplot(df$totalImportInUSD, horizontal = TRUE)
# See if there is an outlier in tariff
boxplot(df$tariffPercentage, horizontal = TRUE)
plot(df$tariffPercentage, df$totalImportInUSD) # negative log looking graph relationship between tarrif and total imports
boxplot(df$totalImportInUSD ~ df$tariffPercentage, horizontal = FALSE, las = 2)
plot(df$totalImportInUSD, df$populationUS)
plot(df$totalImportInUSD, df$medianIncomeCurrentDollar)
summary(import.lm)
import.lm=lm(as.numeric(totalImportInUSD) ~ reversedTariff + populationUS +
medianIncomeCurrentDollar, data=df)
summary(import.lm)
library(dplyr)
new.packages <- listOfPackages[!(listOfPackages %in% installed.packages()[,"Package"])]
# Check if the packages, required for drawing dot-and-whisker plot, are installed. # If not, install them
listOfPackages <- c("dotwhisker","ggplot2", "dplyr")
new.packages <- listOfPackages[!(listOfPackages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Call the libraries
library(ggplot2)
library(dotwhisker)
library(dplyr)
# Draw the dot-and-whisker plot
model1_t = tidy(import.lm) %>%
mutate(model = "Model 1")
# Call the libraries
library(ggplot2)
library(dotwhisker)
library(broom)
library(dplyr)
# Draw the dot-and-whisker plot
model1_t = tidy(import.lm) %>%
mutate(model = "Model 1")
dwplot(model1_t) +
geom_vline(xintercept = 0,
colour = "grey60",
linetype = 2) +
scale_colour_grey(start = .1, end = .7) +
xlab("Coefficeint Estimate") +
ylab("") +
ggtitle("Predicting the Import in US$")
import2.lm=lm(as.numeric(totalImportInUSD) ~ populationUS +
medianIncomeCurrentDollar, data=df)
summary(import2.lm)
# Draw the dot-and-whisker plot
model2_t = tidy(import2.lm) %>%
mutate(model = "Model 2")
dwplot(model2_t) +
geom_vline(xintercept = 0,
colour = "grey60",
linetype = 2) +
scale_colour_grey(start = .1, end = .7) +
xlab("Coefficeint Estimate") +
ylab("") +
ggtitle("Predicting the Import in US$")
import.res = resid(import.lm)
tariffTable = df$tariffPercentage
# length difference between above two vars is giving me trouble
# so removing the NA values from tariffTable vector
tariffTable = tariffTable[!is.na(tariffTable)]
plot(tariffTable, import.res,
ylab="Residuals", xlab="Tariff")
abline(0,0)
abline(0,0)
plot(tariffTable, import.res,
ylab="Residuals", xlab="Tariff")
abline(0,0)
import.stdres = rstandard(import.lm)
qqnorm(import.stdres, xlab="Normal Scores", ylab="Standardized Residuals")
qqline(import.stdres)
import.res = resid(import.lm)
tariffTable = df$tariffPercentage
# length difference between above two vars is giving me trouble
# so removing the NA values from tariffTable vector
tariffTable = tariffTable[!is.na(tariffTable)]
plot(tariffTable, import.res,
ylab="Residuals", xlab="Tariff")
abline(0,0)
abline(0,0)
plot(tariffTable, import.res,
ylab="Residuals", xlab="Tariff")
abline(0,0)
qqnorm(import.stdres, xlab="Normal Scores", ylab="Standardized Residuals")
#Installing packages. It sometimes requires restarting R session and delates variables
# So installing them upfront
listOfPackages0 <- c("zoo","forecast", "MARSS")
new.packages0 <- listOfPackages0[!(listOfPackages0 %in% installed.packages()[,"Package"])]
if(length(new.packages0)) install.packages(new.packages0)
library(zoo) # Importing zoo library to take care of missing data while
# decomposing the time series data
library(forecast) # forecast library contains forecasting funcs for time series
# and linear models
library(MARSS) # Multivariate time-series analasys
# Download the file from the RAW github file
download.file("https://raw.githubusercontent.com/brmkim/599GroupRepo/master/tariff_import.csv",
destfile = "/tmp/test.csv", method = "curl")
df <- read.csv("/tmp/test.csv", stringsAsFactors = FALSE)
str(df)
import.lm=lm(as.numeric(totalImportInUSD) ~ reversedTariff + populationUS +
medianIncomeCurrentDollar, data=df)
import.lm=lm(as.numeric(TotalImportInUSD) ~ Tariff_Reversed + Population +
CurrentDollar, data=df)
import.lm=lm(as.numeric(TotalImportUSD) ~ Tariff_Reversed + Population +
CurrentDollar, data=df)
summary(import.lm)
# Check if the packages, required for drawing dot-and-whisker plot, are installed. # If not, install them
listOfPackages <- c("dotwhisker","ggplot2", "dplyr")
new.packages <- listOfPackages[!(listOfPackages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Call the libraries
library(ggplot2)
library(dotwhisker)
library(broom)
library(dplyr)
# Draw the dot-and-whisker plot
model1_t = tidy(import.lm) %>%
mutate(model = "Model 1")
dwplot(model1_t) +
geom_vline(xintercept = 0,
colour = "grey60",
linetype = 2) +
scale_colour_grey(start = .1, end = .7) +
xlab("Coefficeint Estimate") +
ylab("") +
ggtitle("Predicting the Import in US$")
import.res = resid(import.lm)
tariffTable = df$tariffPercentage
# length difference between above two vars is giving me trouble
# so removing the NA values from tariffTable vector
tariffTable = tariffTable[!is.na(tariffTable)]
plot(tariffTable, import.res,
ylab="Residuals", xlab="Tariff")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("markdown")
library(knitr)
library(markdown)
install.packages("markdown")
library(markdown)
render("599Final.Rmd", "pdf_document") # for some reason, render function is not found
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
library(knitr)
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
library(knitr)
library(markdown)
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
install.packages("markdown")
markdownToHTML("599Final.md", "599Final.html", options=c("use_xtml"))
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
listOfPackages0 <- c("zoo","forecast", "MARSS")
new.packages0 <- listOfPackages0[!(listOfPackages0 %in% installed.packages()[,"Package"])]
if(length(new.packages0)) install.packages(new.packages0)
library(zoo) # Importing zoo library to take care of missing data while
# decomposing the time series data
library(forecast) # forecast library contains forecasting funcs for time series
# and linear models
library(MARSS) # Multivariate time-series analasys
download.file("https://raw.githubusercontent.com/brmkim/599GroupRepo/master/tariff_import.csv",
destfile = "/tmp/test.csv", method = "curl")
df <- read.csv("/tmp/test.csv", stringsAsFactors = FALSE)
str(df)
# Check if the packages, required for drawing dot-and-whisker plot, are installed. # If not, install them
listOfPackages <- c("car","dotwhisker","ggplot2", "dplyr")
new.packages <- listOfPackages[!(listOfPackages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Call the libraries
library(car)
library(ggplot2)
library(dotwhisker)
library(broom)
library(dplyr)
scatterplot(df$TotalImportUSD~df$Tariff_Reversed,
xlab = "Percentage Tariff", ylab = "Total Import from China in USD",
main = "Impact of Tariff on Total Import from China")
plot(df$Tariff~df$Year,main = "Change of Tariff over the Years", xlab = "Year",ylab = "Percentage Tariff")
import.lm=lm(as.numeric(TotalImportUSD) ~ Tariff_Reversed + Population +
CurrentDollar, data=df)
summary(import.lm)
model1_t = tidy(import.lm) %>%
mutate(model = "Model 1")
dwplot(model1_t) +
geom_vline(xintercept = 0,
colour = "grey60",
linetype = 2) +
scale_colour_grey(start = .1, end = .7) +
xlab("Coefficeint Estimate") +
ylab("") +
ggtitle("Predicting the Import in US$")
import.res = resid(import.lm)
tariffTable = df$Tariff
# length difference between above two vars is giving me trouble
# so removing the NA values from tariffTable vector
tariffTable = tariffTable[!is.na(tariffTable)]
plot(tariffTable, import.res,
ylab="Residuals", xlab="Tariff")
#abline(0,0)
import.stdres = rstandard(import.lm)
qqnorm(import.stdres, xlab="Normal Scores", ylab="Standardized Residuals")
#qqline(import.stdres)
# Reversing the order of the year from sml to lg
#dfReverseOrder = df[order(df$Year), ]
#dfReverseOrder$Year = NULL
# Removing unnecessary columns
df$X2017Dollar = NULL
#dfReverseOrder$tariffPercentage = NULL
# ts() function converts a numeric vector into a time-series object
tsData = ts (df, start=df[1,1], end=df[26,1], frequency=1) # yearly data
#tsData
plot(tsData)
tsDataNoNA = na.approx.default(tsData)
seriesData = ts(tsDataNoNA, start = tsDataNoNA[1,1], end=tsDataNoNA[26,1])
plot.ts(seriesData) # No gaps
## Trim Columns
reducedCols = tsDataNoNA[,c(1,3,4,5)] # Making a dataframe composed of
# Median Income, Total Imports in USD, and Tariff %
reducedTS = ts(reducedCols, start = reducedCols[1,1], end=reducedCols[26,1])
#install.packages("forecast")
#library(zoo)
#library(forecast)
## "forecast() function is a generic function for forecasting from time series models.
##  The function invokes particular methods which depen on the class of the first argument"
seriesForecast = forecast(reducedTS, h=8)  # forecasting next 8 years
## Show predicted values in tables and graph
seriesForecast
plot(seriesForecast)    # shows a 80%/95% prediction intervals for the forecast
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
library(knitr)
library(markdown)
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
install.packages("markdown")
.libPaths()
knitrPackages <- c("knitr","markdown")
newpackages <- knitrPackages[!(knitrPackages %in% installed.packages()[,"Package"])]
if(length(newpackages)) install.packages(newpackages)
library(knitr)
library(markdown)
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
x = rev(.packages())
if (file.exists("C:/Program Files/R/R-3.5.3/library"))
x = setdiff(c(readLines("C:/Program Files/R/R-3.5.3/library"), x), .base.pkgs)
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
.libPaths()
x = rev(.packages())
if (file.exists("C:/Users/boram/Documents/R/win-library/3.5"))
x = setdiff(c(readLines("C:/Users/boram/Documents/R/win-library/3.5"), x), .base.pkgs)
# Set working directory
setwd("C:\Users\boram\Documents\GitHub\599GroupRepo")
# Set working directory
setwd("C:\Users\boram\Documents\GitHub\599GroupRepo")
# Set working directory
setwd("C:/Users/boram/Documents/GitHub/599GroupRepo")
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
markdownToHTML("599Final.md", "599Final.html", options=c("use_xtml"))
system("pandoc -s 599Final.html -o 599Final.pdf")
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
# Set working directory. THIS IS AN IMPORTANT STEP.
setwd("C:/Users/boram/Documents/GitHub/599GroupRepo")
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
markdownToHTML("599Final.md", "599Final.html", options=c("use_xtml"))
system("pandoc -s 599Final.html -o 599Final.pdf")
# Set working directory. THIS IS AN IMPORTANT STEP.
setwd("C:/Users/boram/Documents/GitHub/599GroupRepo")
# Create .md, .html, and .pdf files
knit("599Final.Rmd")
x = rev(.packages())
if (file.exists("C:/Users/boram/Documents/R/win-library/3.5"))
x = setdiff(c(readLines("C:/Users/boram/Documents/R/win-library/3.5"), x), .base.pkgs)
# Set working directory. THIS IS AN IMPORTANT STEP.
setwd("C:/Users/boram/Documents/GitHub/599GroupRepo")
x = setdiff(c(readLines("C:/Users/boram/Documents/R/win-library/3.5"), x), .base.pkgs)
writeLines(x, "C:/Users/boram/Documents/R/win-library/3.5")
